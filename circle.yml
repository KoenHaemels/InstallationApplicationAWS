---
machine:
  timezone: Europe/Brussels
  environment:
    PACKER_VERSION: 0.8.1
    BUILD: ${CIRCLE_BUILD_NUM}
    PREVIOUSBUILD: ${CIRCLE_PREVIOUS_BUILD_NUM}
general:
  branches:
    only:
      # List of branches to ignore
      - master
dependencies:
  cache_directories:
    - "~/bin"
  pre:
    # =======================
    # Installation Packer
    # =======================
    - mkdir -p ~/packer
    - wget https://releases.hashicorp.com/packer/0.12.0/packer_0.12.0_linux_amd64.zip
    - unzip packer_0.12.0_linux_amd64.zip
    - mv packer ~/bin/packer
    # =======================
    # Installation GIT + clone repository
    # =======================
    - sudo apt-get install git -y
    - cd /var
    - git clone https://github.com/KoenHaemels/InstallationApplicationAWS.git
    - cd InstallationApplicationAWS/
    # =======================
    # Login to AWS cli
    # =======================
    - sudo apt-get install python-pip -y
    - pip install --upgrade --user awscli
    - aws configure set aws_access_key_id ${ACCES_KEY_AZURE}
    - aws configure set aws_secret_access_key ${ACCES_SECRET_KEY_AZURE}
    - aws configure set default.region eu-central-1
    # =======================
    # Delete previous packer image
    # =======================
    - aws ec2 describe-images --filters Name=name,Values=packer-cvo-"${CIRCLE_PREVIOUS_BUILD_NUM}" | grep "ImageId" | sed -e 's/"ImageId": //g' -e 's/"//g' -e 's/,//g' -e 's/            //g' > aminame.txt 
    - aws ec2 deregister-image --image-id $(cat aminame.txt)
    # =======================
    # Change credentials
    # =======================
    - /bin/sed -i "s|acceskeyAZURE|"${ACCES_KEY_AZURE}"|g" Credits/template.json
    - /bin/sed -i "s|accessecretkeyAZURE|"${ACCES_SECRET_KEY_AZURE}"|g" Credits/template.json
    - /bin/sed -i "s|imagename|packer-cvo-"${CIRCLE_BUILD_NUM}"|g" Credits/template.json
    - /bin/sed -i "s|owners_AZURE|"${OWNERS_AZURE}"|g" Credits/template.json
    - sudo echo "${ACCES_KEY_AZURE}:${ACCES_SECRET_KEY_AZURE}" > ~/passwd-s3fs
    - sudo cat ~/passwd-s3fs
    - sudo mv ~/passwd-s3fs Credits/passwd-s3fs
    - sudo chmod +x main.sh
    - sudo chmod +x Tests/test.sh
    # =======================
test:
  override:
    # =======================
    # Run installation of the application
    # =======================
    - ./main.sh
    # =======================
    # Check JSON file
    # =======================
    - ~/bin/packer validate Credits/template.json
    # =======================
deployment:
  production:
    pre:
      - pyenv global 2.7.12
  packer:
    branch: master
    commands:
      # Build new image
      # =======================
      - ~/bin/packer build Credits/template.json
      # =======================
      # Create new instance
      # =======================
      #- sudo /opt/google-cloud-sdk/bin/gcloud deployment-manager deployments create instance-"${BUILD}" --config template.yml --project=certain-nexus-865
      # =======================
      # Rolling update
      # =======================
      #- sudo /opt/google-cloud-sdk/bin/gcloud alpha compute rolling-updates start --zone europe-west1-b --group=test-instance-groupmanager --template template-file-"${BUILD}" --max-num-concurrent-instances 1 --min-instance-update-time 1m
      #- sudo /opt/google-cloud-sdk/bin/gcloud alpha compute instance-groups managed rolling-action start-update test-instance-groupmanager --version template=template-file-"${BUILD}" --min-ready 1m --max-unavailable 1 --zone europe-west1-b --force
      # =======================
      # Delete Previous instance
      # =======================
      #- sudo /opt/google-cloud-sdk/bin/gcloud deployment-manager deployments delete instance-"${PREVIOUSBUILD}" -q
